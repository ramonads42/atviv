{"ast":null,"code":"import Cliente from \"modelo/cliente\";\nimport CPF from \"modelo/cpf\";\nimport Telefone from \"modelo/telefone\";\nconst API_BASE_URL = 'http://localhost:32831/cliente';\nclass ClienteApiService {\n  async getClientes() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/clientes`);\n      if (!response.ok) {\n        throw new Error(`Erro HTTP! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data.map(clienteData => {\n        const id = clienteData.id;\n        const cpf = new CPF(\"CPF Não Disponível\", new Date());\n        const cliente = new Cliente(clienteData.nome, clienteData.nomeSocial, cpf, id);\n        if (clienteData.telefones && Array.isArray(clienteData.telefones)) {\n          clienteData.telefones.forEach(telData => {\n            cliente.getTelefones.push(new Telefone(telData.ddd, telData.numero));\n          });\n        }\n        return cliente;\n      });\n    } catch (error) {\n      console.error(\"Erro ao buscar clientes:\", error);\n      return [];\n    }\n  }\n  async cadastrarCliente(cliente) {\n    try {\n      const payload = {\n        nome: cliente.nome,\n        nomeSocial: cliente.nomeSocial,\n        email: null,\n        endereco: null,\n        telefones: []\n      };\n      const response = await fetch(`${API_BASE_URL}/cadastrar`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      if (response.status === 200 || response.status === 201) {\n        console.log(\"Cliente cadastrado com sucesso no backend!\");\n        return true;\n      } else {\n        const errorText = await response.text();\n        console.error(`Erro ao cadastrar cliente! Status: ${response.status}, Resposta: ${errorText}`);\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Erro na requisição de cadastro:\", error);\n      return false;\n    }\n  }\n  async atualizarCliente(idCliente, novoNome, novoNomeSocial) {\n    try {\n      const payload = {\n        id: idCliente,\n        nome: novoNome,\n        nomeSocial: novoNomeSocial\n      };\n      const response = await fetch(`${API_BASE_URL}/atualizar`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      if (response.status === 200) {\n        console.log(`Cliente ID ${idCliente} atualizado com sucesso no backend!`);\n        return true;\n      } else {\n        const errorText = await response.text();\n        console.error(`Erro ao atualizar cliente! Status: ${response.status}, Resposta: ${errorText}`);\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Erro na requisição de atualização:\", error);\n      return false;\n    }\n  }\n  async excluirCliente(idCliente) {\n    try {\n      const payload = {\n        id: idCliente\n      };\n      const response = await fetch(`${API_BASE_URL}/excluir`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      if (response.status === 200) {\n        console.log(`Cliente ID ${idCliente} excluído com sucesso do backend!`);\n        return true;\n      } else {\n        const errorText = await response.text();\n        console.error(`Erro ao excluir cliente! Status: ${response.status}, Resposta: ${errorText}`);\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Erro na requisição de exclusão:\", error);\n      return false;\n    }\n  }\n}\nconst clienteApiService = new ClienteApiService();\nexport default clienteApiService;","map":{"version":3,"names":["Cliente","CPF","Telefone","API_BASE_URL","ClienteApiService","getClientes","response","fetch","ok","Error","status","data","json","map","clienteData","id","cpf","Date","cliente","nome","nomeSocial","telefones","Array","isArray","forEach","telData","getTelefones","push","ddd","numero","error","console","cadastrarCliente","payload","email","endereco","method","headers","body","JSON","stringify","log","errorText","text","atualizarCliente","idCliente","novoNome","novoNomeSocial","excluirCliente","clienteApiService"],"sources":["/home/ramonads/4/atviv/frontend/src/servicos/ClienteApiService.ts"],"sourcesContent":["import Cliente from \"modelo/cliente\"; \nimport CPF from \"modelo/cpf\";      \nimport Telefone from \"modelo/telefone\"; \n\nconst API_BASE_URL = 'http://localhost:32831/cliente';\n\n\nclass ClienteApiService {\n\n\n    async getClientes(): Promise<Cliente[]> {\n        try {\n            const response = await fetch(`${API_BASE_URL}/clientes`);\n            if (!response.ok) {\n\n                throw new Error(`Erro HTTP! status: ${response.status}`);\n            }\n            const data = await response.json();\n            \n            return data.map((clienteData: any) => {\n                const id = clienteData.id; \n\n                const cpf = new CPF(\"CPF Não Disponível\", new Date()); \n                \n                const cliente = new Cliente(clienteData.nome, clienteData.nomeSocial, cpf, id);\n                \n                if (clienteData.telefones && Array.isArray(clienteData.telefones)) {\n                    clienteData.telefones.forEach((telData: any) => {\n                        cliente.getTelefones.push(new Telefone(telData.ddd, telData.numero));\n                    });\n                }\n\n                return cliente;\n            });\n        } catch (error) {\n            console.error(\"Erro ao buscar clientes:\", error);\n            return []; \n        }\n    }\n\n\n    async cadastrarCliente(cliente: { nome: string, nomeSocial: string, cpf: string, dataEmissaoCpf: string, telefones?: { ddd: string, numero: string }[] }): Promise<boolean> {\n        try {\n            const payload = {\n                nome: cliente.nome,\n                nomeSocial: cliente.nomeSocial,\n                email: null, \n                endereco: null,\n                telefones: [] \n            };\n\n            const response = await fetch(`${API_BASE_URL}/cadastrar`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(payload),\n            });\n\n            if (response.status === 200 || response.status === 201) {\n                console.log(\"Cliente cadastrado com sucesso no backend!\");\n                return true;\n            } else {\n                const errorText = await response.text();\n                console.error(`Erro ao cadastrar cliente! Status: ${response.status}, Resposta: ${errorText}`);\n                return false;\n            }\n        } catch (error) {\n            console.error(\"Erro na requisição de cadastro:\", error);\n            return false;\n        }\n    }\n\n    async atualizarCliente(idCliente: number, novoNome: string, novoNomeSocial: string): Promise<boolean> {\n        try {\n            const payload = {\n                id: idCliente,\n                nome: novoNome,\n                nomeSocial: novoNomeSocial,\n            };\n\n            const response = await fetch(`${API_BASE_URL}/atualizar`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(payload),\n            });\n\n            if (response.status === 200) { \n                console.log(`Cliente ID ${idCliente} atualizado com sucesso no backend!`);\n                return true;\n            } else {\n                const errorText = await response.text();\n                console.error(`Erro ao atualizar cliente! Status: ${response.status}, Resposta: ${errorText}`);\n                return false;\n            }\n        } catch (error) {\n            console.error(\"Erro na requisição de atualização:\", error);\n            return false;\n        }\n    }\n\n    async excluirCliente(idCliente: number): Promise<boolean> {\n        try {\n            const payload = { id: idCliente };\n\n            const response = await fetch(`${API_BASE_URL}/excluir`, {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(payload),\n            });\n\n            if (response.status === 200) {\n                console.log(`Cliente ID ${idCliente} excluído com sucesso do backend!`);\n                return true;\n            } else {\n                const errorText = await response.text();\n                console.error(`Erro ao excluir cliente! Status: ${response.status}, Resposta: ${errorText}`);\n                return false;\n            }\n        } catch (error) {\n            console.error(\"Erro na requisição de exclusão:\", error);\n            return false;\n        }\n    }\n}\n\nconst clienteApiService = new ClienteApiService();\nexport default clienteApiService;\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,gBAAgB;AACpC,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,QAAQ,MAAM,iBAAiB;AAEtC,MAAMC,YAAY,GAAG,gCAAgC;AAGrD,MAAMC,iBAAiB,CAAC;EAGpB,MAAMC,WAAWA,CAAA,EAAuB;IACpC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,WAAW,CAAC;MACxD,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QAEd,MAAM,IAAIC,KAAK,CAAC,sBAAsBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC5D;MACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAElC,OAAOD,IAAI,CAACE,GAAG,CAAEC,WAAgB,IAAK;QAClC,MAAMC,EAAE,GAAGD,WAAW,CAACC,EAAE;QAEzB,MAAMC,GAAG,GAAG,IAAIf,GAAG,CAAC,oBAAoB,EAAE,IAAIgB,IAAI,CAAC,CAAC,CAAC;QAErD,MAAMC,OAAO,GAAG,IAAIlB,OAAO,CAACc,WAAW,CAACK,IAAI,EAAEL,WAAW,CAACM,UAAU,EAAEJ,GAAG,EAAED,EAAE,CAAC;QAE9E,IAAID,WAAW,CAACO,SAAS,IAAIC,KAAK,CAACC,OAAO,CAACT,WAAW,CAACO,SAAS,CAAC,EAAE;UAC/DP,WAAW,CAACO,SAAS,CAACG,OAAO,CAAEC,OAAY,IAAK;YAC5CP,OAAO,CAACQ,YAAY,CAACC,IAAI,CAAC,IAAIzB,QAAQ,CAACuB,OAAO,CAACG,GAAG,EAAEH,OAAO,CAACI,MAAM,CAAC,CAAC;UACxE,CAAC,CAAC;QACN;QAEA,OAAOX,OAAO;MAClB,CAAC,CAAC;IACN,CAAC,CAAC,OAAOY,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO,EAAE;IACb;EACJ;EAGA,MAAME,gBAAgBA,CAACd,OAAiI,EAAoB;IACxK,IAAI;MACA,MAAMe,OAAO,GAAG;QACZd,IAAI,EAAED,OAAO,CAACC,IAAI;QAClBC,UAAU,EAAEF,OAAO,CAACE,UAAU;QAC9Bc,KAAK,EAAE,IAAI;QACXC,QAAQ,EAAE,IAAI;QACdd,SAAS,EAAE;MACf,CAAC;MAED,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,YAAY,EAAE;QACtDiC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;MAChC,CAAC,CAAC;MAEF,IAAI3B,QAAQ,CAACI,MAAM,KAAK,GAAG,IAAIJ,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;QACpDqB,OAAO,CAACU,GAAG,CAAC,4CAA4C,CAAC;QACzD,OAAO,IAAI;MACf,CAAC,MAAM;QACH,MAAMC,SAAS,GAAG,MAAMpC,QAAQ,CAACqC,IAAI,CAAC,CAAC;QACvCZ,OAAO,CAACD,KAAK,CAAC,sCAAsCxB,QAAQ,CAACI,MAAM,eAAegC,SAAS,EAAE,CAAC;QAC9F,OAAO,KAAK;MAChB;IACJ,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAO,KAAK;IAChB;EACJ;EAEA,MAAMc,gBAAgBA,CAACC,SAAiB,EAAEC,QAAgB,EAAEC,cAAsB,EAAoB;IAClG,IAAI;MACA,MAAMd,OAAO,GAAG;QACZlB,EAAE,EAAE8B,SAAS;QACb1B,IAAI,EAAE2B,QAAQ;QACd1B,UAAU,EAAE2B;MAChB,CAAC;MAED,MAAMzC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,YAAY,EAAE;QACtDiC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;MAChC,CAAC,CAAC;MAEF,IAAI3B,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;QACzBqB,OAAO,CAACU,GAAG,CAAC,cAAcI,SAAS,qCAAqC,CAAC;QACzE,OAAO,IAAI;MACf,CAAC,MAAM;QACH,MAAMH,SAAS,GAAG,MAAMpC,QAAQ,CAACqC,IAAI,CAAC,CAAC;QACvCZ,OAAO,CAACD,KAAK,CAAC,sCAAsCxB,QAAQ,CAACI,MAAM,eAAegC,SAAS,EAAE,CAAC;QAC9F,OAAO,KAAK;MAChB;IACJ,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,OAAO,KAAK;IAChB;EACJ;EAEA,MAAMkB,cAAcA,CAACH,SAAiB,EAAoB;IACtD,IAAI;MACA,MAAMZ,OAAO,GAAG;QAAElB,EAAE,EAAE8B;MAAU,CAAC;MAEjC,MAAMvC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,UAAU,EAAE;QACpDiC,MAAM,EAAE,QAAQ;QAChBC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;MAChC,CAAC,CAAC;MAEF,IAAI3B,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;QACzBqB,OAAO,CAACU,GAAG,CAAC,cAAcI,SAAS,mCAAmC,CAAC;QACvE,OAAO,IAAI;MACf,CAAC,MAAM;QACH,MAAMH,SAAS,GAAG,MAAMpC,QAAQ,CAACqC,IAAI,CAAC,CAAC;QACvCZ,OAAO,CAACD,KAAK,CAAC,oCAAoCxB,QAAQ,CAACI,MAAM,eAAegC,SAAS,EAAE,CAAC;QAC5F,OAAO,KAAK;MAChB;IACJ,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAO,KAAK;IAChB;EACJ;AACJ;AAEA,MAAMmB,iBAAiB,GAAG,IAAI7C,iBAAiB,CAAC,CAAC;AACjD,eAAe6C,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}