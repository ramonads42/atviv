{"ast":null,"code":"import Empresa from \"modelo/empresa\";\nimport Produto from \"modelo/produto\";\nimport Servico from \"modelo/servico\";\nimport Pet from \"modelo/pet\";\nimport clienteApiService from \"./ClienteApiService\";\nclass EmpresaService {\n  constructor() {\n    this.empresa = void 0;\n    this.empresa = new Empresa();\n    this.cadastrarClienteComDados = this.cadastrarClienteComDados.bind(this);\n    this.atualizarCliente = this.atualizarCliente.bind(this);\n    this.excluirCliente = this.excluirCliente.bind(this);\n    this.getClientes = this.getClientes.bind(this);\n    this.cadastrarPet = this.cadastrarPet.bind(this);\n    this.atualizarPet = this.atualizarPet.bind(this);\n    this.excluirPet = this.excluirPet.bind(this);\n    this.cadastrarProduto = this.cadastrarProduto.bind(this);\n    this.atualizarProduto = this.atualizarProduto.bind(this);\n    this.excluirProduto = this.excluirProduto.bind(this);\n    this.cadastrarServico = this.cadastrarServico.bind(this);\n    this.atualizarServico = this.atualizarServico.bind(this);\n    this.excluirServico = this.excluirServico.bind(this);\n    this.registrarConsumo = this.registrarConsumo.bind(this);\n    this.getRelatorioTop10ClientesPorQuantidade = this.getRelatorioTop10ClientesPorQuantidade.bind(this);\n    this.getRelatorioTop5ClientesPorValor = this.getRelatorioTop5ClientesPorValor.bind(this);\n    this.getRelatorioProdutosServicosMaisConsumidos = this.getRelatorioProdutosServicosMaisConsumidos.bind(this);\n    this.getRelatorioConsumoPorTipoRaca = this.getRelatorioConsumoPorTipoRaca.bind(this);\n    this.getRelatorioConsumoPorTipo = this.getRelatorioConsumoPorTipo.bind(this);\n    this.popularDadosIniciaisLocais();\n  }\n  async getClientes() {\n    const clientesDoBackend = await clienteApiService.getClientes();\n    this.empresa.getClientes.splice(0, this.empresa.getClientes.length, ...clientesDoBackend);\n    return this.empresa.getClientes;\n  }\n  getProdutos() {\n    return this.empresa.getProdutos;\n  }\n  getServicos() {\n    return this.empresa.getServicos;\n  }\n  async cadastrarClienteComDados(nome, nomeSocial, cpfValor, dataEmissaoString) {\n    const sucesso = await clienteApiService.cadastrarCliente({\n      nome,\n      nomeSocial,\n      cpf: cpfValor,\n      dataEmissaoCpf: dataEmissaoString\n    });\n    if (sucesso) {\n      console.log(`Cliente ${nome} cadastrado com sucesso via API!`);\n      await this.getClientes();\n    } else {\n      console.warn(`Falha ao cadastrar cliente ${nome} via API.`);\n    }\n    return sucesso;\n  }\n  async atualizarCliente(idCliente, novoNome, novoNomeSocial) {\n    const sucesso = await clienteApiService.atualizarCliente(idCliente, novoNome, novoNomeSocial);\n    if (sucesso) {\n      console.log(`Cliente ID ${idCliente} atualizado com sucesso via API!`);\n      await this.getClientes();\n    } else {\n      console.warn(`Falha ao atualizar cliente ID ${idCliente} via API.`);\n    }\n    return sucesso;\n  }\n  async excluirCliente(idCliente) {\n    const sucesso = await clienteApiService.excluirCliente(idCliente);\n    if (sucesso) {\n      console.log(`Cliente ID ${idCliente} excluído com sucesso via API!`);\n      await this.getClientes();\n    } else {\n      console.warn(`Falha ao excluir cliente ID ${idCliente} via API.`);\n    }\n    return sucesso;\n  }\n  cadastrarPet(cpfCliente, nome, tipo, raca, genero) {\n    const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n    if (cliente) {\n      const pet = new Pet(nome, raca, genero, tipo);\n      cliente.getPets.push(pet);\n      console.log(`Pet ${nome} cadastrado para o cliente ${cliente.nome} (localmente)`);\n    } else {\n      console.warn(`Cliente com CPF ${cpfCliente} não encontrado para cadastrar pet (localmente).`);\n    }\n  }\n  atualizarPet(cpfClienteOriginal, nomePetOriginal, novoNome, novoTipo, novaRaca, novoGenero) {\n    const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfClienteOriginal);\n    if (cliente) {\n      const pet = cliente.getPets.find(p => p.getNome === nomePetOriginal);\n      if (pet) {\n        if (novoNome) pet.setNome(novoNome);\n        if (novoTipo) pet.setTipo(novoTipo);\n        if (novaRaca) pet.setRaca(novaRaca);\n        if (novoGenero) pet.setGenero(novoGenero);\n        console.log(`Pet ${nomePetOriginal} do cliente ${cliente.nome} atualizado (localmente).`);\n      } else {\n        console.warn(`Pet ${nomePetOriginal} não encontrado para o cliente ${cliente.nome} (localmente).`);\n      }\n    } else {\n      console.warn(`Cliente com CPF ${cpfClienteOriginal} não encontrado para atualizar pet (localmente).`);\n    }\n  }\n  excluirPet(cpfCliente, nomePet) {\n    const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n    if (cliente) {\n      const index = cliente.getPets.findIndex(p => p.getNome === nomePet);\n      if (index !== -1) {\n        cliente.getPets.splice(index, 1);\n        console.log(`Pet ${nomePet} do cliente ${cliente.nome} excluído (localmente).`);\n      } else {\n        console.warn(`Pet ${nomePet} não encontrado para o cliente ${cliente.nome} (localmente).`);\n      }\n    } else {\n      console.warn(`Cliente com CPF ${cpfCliente} não encontrado para excluir pet (localmente).`);\n    }\n  }\n  cadastrarProduto(nome, valor, descricao) {\n    const produto = new Produto(nome, valor, descricao);\n    this.empresa.getProdutos.push(produto);\n    console.log(`Produto ${nome} cadastrado (localmente).`);\n  }\n  atualizarProduto(nomeProdutoOriginal, novoNome, novoValor, novaDescricao) {\n    const produto = this.empresa.getProdutos.find(p => p.getNome === nomeProdutoOriginal);\n    if (produto) {\n      if (novoNome) produto.setNome(novoNome);\n      if (novoValor !== undefined && novoValor !== null) produto.setValor(novoValor);\n      if (novaDescricao) produto.setDescricao(novaDescricao);\n      console.log(`Produto ${nomeProdutoOriginal} atualizado (localmente).`);\n    } else {\n      console.warn(`Produto ${nomeProdutoOriginal} não encontrado para atualização (localmente).`);\n    }\n  }\n  excluirProduto(nomeProduto) {\n    const index = this.empresa.getProdutos.findIndex(p => p.getNome === nomeProduto);\n    if (index !== -1) {\n      this.empresa.getProdutos.splice(index, 1);\n      console.log(`Produto ${nomeProduto} excluído (localmente).`);\n    } else {\n      console.warn(`Produto ${nomeProduto} não encontrado para exclusão (localmente).`);\n    }\n  }\n  cadastrarServico(nome, valor, descricao) {\n    const servico = new Servico(nome, valor, descricao);\n    this.empresa.getServicos.push(servico);\n    console.log(`Serviço ${nome} cadastrado (localmente).`);\n  }\n  atualizarServico(nomeServicoOriginal, novoNome, novoValor, novaDescricao) {\n    const servico = this.empresa.getServicos.find(s => s.getNome === nomeServicoOriginal);\n    if (servico) {\n      if (novoNome) servico.setNome(novoNome);\n      if (novoValor !== undefined && novoValor !== null) servico.setValor(novoValor);\n      if (novaDescricao) servico.setDescricao(novaDescricao);\n      console.log(`Serviço ${nomeServicoOriginal} atualizado (localmente).`);\n    } else {\n      console.warn(`Serviço ${nomeServicoOriginal} não encontrado para atualização (localmente).`);\n    }\n  }\n  excluirServico(nomeServico) {\n    const index = this.empresa.getServicos.findIndex(s => s.getNome === nomeServico);\n    if (index !== -1) {\n      this.empresa.getServicos.splice(index, 1);\n      console.log(`Serviço ${nomeServico} excluído (localmente).`);\n    } else {\n      console.warn(`Serviço ${nomeServico} não encontrado para exclusão (localmente).`);\n    }\n  }\n  registrarConsumo(cpfCliente, nomeItem, tipoItem) {\n    const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n    if (cliente) {\n      if (tipoItem === 'produto') {\n        const produto = this.empresa.getProdutos.find(p => p.getNome === nomeItem);\n        if (produto) {\n          cliente.getProdutosConsumidos.push(produto);\n          console.log(`Produto ${nomeItem} registrado para ${cliente.nome} (localmente)`);\n        } else {\n          console.warn(`Produto ${nomeItem} não encontrado (localmente).`);\n        }\n      } else if (tipoItem === 'servico') {\n        const servico = this.empresa.getServicos.find(s => s.getNome === nomeItem);\n        if (servico) {\n          cliente.getServicosConsumidos.push(servico);\n          console.log(`Serviço ${nomeItem} registrado para ${cliente.nome} (localmente)`);\n        } else {\n          console.warn(`Serviço ${nomeItem} não encontrado (localmente).`);\n        }\n      }\n    } else {\n      console.warn(`Cliente com CPF ${cpfCliente} não encontrado (localmente).`);\n    }\n  }\n  getRelatorioTop10ClientesPorQuantidade() {\n    const listaClientes = [];\n    this.empresa.getClientes.forEach(cliente => {\n      const produtos = cliente.getProdutosConsumidos.length;\n      const servicos = cliente.getServicosConsumidos.length;\n      const total = produtos + servicos;\n      listaClientes.push({\n        cliente,\n        quantidade: total\n      });\n    });\n    const top10 = listaClientes.sort((a, b) => b.quantidade - a.quantidade).slice(0, 10).map((item, index) => ({\n      posicao: index + 1,\n      cliente: item.cliente.nome,\n      quantidadeProdutos: item.cliente.getProdutosConsumidos.length,\n      quantidadeServicos: item.cliente.getServicosConsumidos.length,\n      total: item.quantidade\n    }));\n    return top10.filter(item => item.total > 0);\n  }\n  getRelatorioTop5ClientesPorValor() {\n    const listaClientes = [];\n    this.empresa.getClientes.forEach(cliente => {\n      let valorTotal = 0;\n      cliente.getProdutosConsumidos.forEach(produto => {\n        valorTotal += produto.getValor;\n      });\n      cliente.getServicosConsumidos.forEach(servico => {\n        valorTotal += servico.getValor;\n      });\n      listaClientes.push({\n        cliente,\n        valor: valorTotal\n      });\n    });\n    const top5 = listaClientes.sort((a, b) => b.valor - a.valor).slice(0, 5).map((item, index) => ({\n      posicao: index + 1,\n      cliente: item.cliente.nome,\n      valorTotal: item.valor\n    }));\n    return top5.filter(item => item.valorTotal > 0);\n  }\n  getRelatorioProdutosServicosMaisConsumidos() {\n    const contagem = {};\n    this.empresa.getProdutos.forEach(p => {\n      contagem[`Produto-${p.getNome}`] = {\n        nome: p.getNome,\n        tipo: 'Produto',\n        quantidade: 0\n      };\n    });\n    this.empresa.getServicos.forEach(s => {\n      contagem[`Serviço-${s.getNome}`] = {\n        nome: s.getNome,\n        tipo: 'Serviço',\n        quantidade: 0\n      };\n    });\n    this.empresa.getClientes.forEach(cliente => {\n      cliente.getProdutosConsumidos.forEach(produto => {\n        const key = `Produto-${produto.getNome}`;\n        if (contagem[key]) {\n          contagem[key].quantidade++;\n        }\n      });\n      cliente.getServicosConsumidos.forEach(servico => {\n        const key = `Serviço-${servico.getNome}`;\n        if (contagem[key]) {\n          contagem[key].quantidade++;\n        }\n      });\n    });\n    const ranking = Object.values(contagem).filter(item => item.quantidade > 0).sort((a, b) => b.quantidade - a.quantidade);\n    return ranking;\n  }\n  getRelatorioConsumoPorTipoRaca() {\n    const resultados = [];\n    this.empresa.getClientes.forEach(cliente => {\n      cliente.getPets.forEach(pet => {\n        const tipo = pet.getTipo;\n        const raca = pet.getRaca;\n        if (!tipo || !raca || tipo.trim() === '' || raca.trim() === '') {\n          console.warn(`[Relatório Tipo/Raça] Pulando Pet com tipo/raça indefinidos/vazios para cliente ${cliente.nome}: ${pet.getNome}`);\n          return;\n        }\n        const tipoRaca = `${tipo} - ${raca}`;\n        cliente.getProdutosConsumidos.forEach(produto => {\n          let encontrado = resultados.find(r => r.tipoRaca === tipoRaca && r.nome === produto.getNome && r.tipo === 'Produto');\n          if (encontrado) {\n            encontrado.quantidade++;\n          } else {\n            resultados.push({\n              tipoRaca,\n              nome: produto.getNome,\n              tipo: 'Produto',\n              quantidade: 1\n            });\n          }\n        });\n        cliente.getServicosConsumidos.forEach(servico => {\n          let encontrado = resultados.find(r => r.tipoRaca === tipoRaca && r.nome === servico.getNome && r.tipo === 'Serviço');\n          if (encontrado) {\n            encontrado.quantidade++;\n          } else {\n            resultados.push({\n              tipoRaca,\n              nome: servico.getNome,\n              tipo: 'Serviço',\n              quantidade: 1\n            });\n          }\n        });\n      });\n    });\n    const grupos = {};\n    resultados.forEach(item => {\n      if (!grupos[item.tipoRaca]) grupos[item.tipoRaca] = [];\n      grupos[item.tipoRaca].push(item);\n    });\n    const relatorioFinal = [];\n    Object.keys(grupos).sort().forEach(tipoRaca => {\n      grupos[tipoRaca].sort((a, b) => b.quantidade - a.quantidade).forEach(item => {\n        relatorioFinal.push(item);\n      });\n    });\n    return relatorioFinal;\n  }\n  getRelatorioConsumoPorTipo() {\n    const resultados = [];\n    this.empresa.getClientes.forEach(cliente => {\n      cliente.getPets.forEach(pet => {\n        const tipoPet = pet.getTipo;\n        if (!tipoPet || tipoPet.trim() === '') {\n          console.warn(`[Relatório Tipo] Pulando Pet com tipo indefinido/vazio para cliente ${cliente.nome}: ${pet.getNome}`);\n          return;\n        }\n        cliente.getProdutosConsumidos.forEach(produto => {\n          let encontrado = resultados.find(r => r.tipoPet === tipoPet && r.nomeItem === produto.getNome && r.tipoItem === 'Produto');\n          if (encontrado) {\n            encontrado.quantidade++;\n          } else {\n            resultados.push({\n              tipoPet,\n              nomeItem: produto.getNome,\n              tipoItem: 'Produto',\n              quantidade: 1\n            });\n          }\n        });\n        cliente.getServicosConsumidos.forEach(servico => {\n          let encontrado = resultados.find(r => r.tipoPet === tipoPet && r.nomeItem === servico.getNome && r.tipoItem === 'Serviço');\n          if (encontrado) {\n            encontrado.quantidade++;\n          } else {\n            resultados.push({\n              tipoPet,\n              nomeItem: servico.getNome,\n              tipoItem: 'Serviço',\n              quantidade: 1\n            });\n          }\n        });\n      });\n    });\n    const grupos = {};\n    resultados.forEach(item => {\n      if (!grupos[item.tipoPet]) grupos[item.tipoPet] = [];\n      grupos[item.tipoPet].push(item);\n    });\n    const relatorioFinal = [];\n    Object.keys(grupos).sort().forEach(tipoPet => {\n      grupos[tipoPet].sort((a, b) => b.quantidade - a.quantidade).forEach(item => {\n        relatorioFinal.push(item);\n      });\n    });\n    return relatorioFinal;\n  }\n  popularDadosIniciaisLocais() {\n    const racaoPremium = new Produto(\"Ração Premium\", 75.50, \"Ração de alta qualidade para cães e gatos\");\n    this.empresa.getProdutos.push(racaoPremium);\n    const visitaVeterinaria = new Servico(\"Visita Veterinária\", 500.00, \"Consulta e check-up geral\");\n    this.empresa.getServicos.push(visitaVeterinaria);\n    const petCachorro = new Pet(\"Buddy\", \"Poodle\", \"Macho\", \"Cachorro\");\n    const petGato = new Pet(\"Mia\", \"Siamese\", \"Fêmea\", \"Gato\");\n    const petPassaro = new Pet(\"Pipoca\", \"Calopsita\", \"Fêmea\", \"Pássaro\");\n    console.log(\"Produtos e Serviços locais populados.\");\n  }\n}\nconst empresaService = new EmpresaService();\nexport default empresaService;","map":{"version":3,"names":["Empresa","Produto","Servico","Pet","clienteApiService","EmpresaService","constructor","empresa","cadastrarClienteComDados","bind","atualizarCliente","excluirCliente","getClientes","cadastrarPet","atualizarPet","excluirPet","cadastrarProduto","atualizarProduto","excluirProduto","cadastrarServico","atualizarServico","excluirServico","registrarConsumo","getRelatorioTop10ClientesPorQuantidade","getRelatorioTop5ClientesPorValor","getRelatorioProdutosServicosMaisConsumidos","getRelatorioConsumoPorTipoRaca","getRelatorioConsumoPorTipo","popularDadosIniciaisLocais","clientesDoBackend","splice","length","getProdutos","getServicos","nome","nomeSocial","cpfValor","dataEmissaoString","sucesso","cadastrarCliente","cpf","dataEmissaoCpf","console","log","warn","idCliente","novoNome","novoNomeSocial","cpfCliente","tipo","raca","genero","cliente","find","c","getCpf","getValor","pet","getPets","push","cpfClienteOriginal","nomePetOriginal","novoTipo","novaRaca","novoGenero","p","getNome","setNome","setTipo","setRaca","setGenero","nomePet","index","findIndex","valor","descricao","produto","nomeProdutoOriginal","novoValor","novaDescricao","undefined","setValor","setDescricao","nomeProduto","servico","nomeServicoOriginal","s","nomeServico","nomeItem","tipoItem","getProdutosConsumidos","getServicosConsumidos","listaClientes","forEach","produtos","servicos","total","quantidade","top10","sort","a","b","slice","map","item","posicao","quantidadeProdutos","quantidadeServicos","filter","valorTotal","top5","contagem","key","ranking","Object","values","resultados","getTipo","getRaca","trim","tipoRaca","encontrado","r","grupos","relatorioFinal","keys","tipoPet","racaoPremium","visitaVeterinaria","petCachorro","petGato","petPassaro","empresaService"],"sources":["/home/ramonads/4/atviv/frontend/src/servicos/EmpresaService.ts"],"sourcesContent":["import Empresa from \"modelo/empresa\";\nimport Cliente from \"modelo/cliente\";\nimport Produto from \"modelo/produto\";\nimport Servico from \"modelo/servico\";\nimport Pet from \"modelo/pet\";\nimport CPF from \"modelo/cpf\";\nimport Telefone from \"modelo/telefone\";\n\nimport clienteApiService from \"./ClienteApiService\";\n\nclass EmpresaService {\n    private empresa: Empresa;\n\n    constructor() {\n        this.empresa = new Empresa();\n\n        this.cadastrarClienteComDados = this.cadastrarClienteComDados.bind(this);\n        this.atualizarCliente = this.atualizarCliente.bind(this);\n        this.excluirCliente = this.excluirCliente.bind(this);\n        this.getClientes = this.getClientes.bind(this);\n\n\n        this.cadastrarPet = this.cadastrarPet.bind(this);\n        this.atualizarPet = this.atualizarPet.bind(this);\n        this.excluirPet = this.excluirPet.bind(this);\n        this.cadastrarProduto = this.cadastrarProduto.bind(this);\n        this.atualizarProduto = this.atualizarProduto.bind(this);\n        this.excluirProduto = this.excluirProduto.bind(this);\n        this.cadastrarServico = this.cadastrarServico.bind(this);\n        this.atualizarServico = this.atualizarServico.bind(this);\n        this.excluirServico = this.excluirServico.bind(this);\n        this.registrarConsumo = this.registrarConsumo.bind(this);\n\n        this.getRelatorioTop10ClientesPorQuantidade = this.getRelatorioTop10ClientesPorQuantidade.bind(this);\n        this.getRelatorioTop5ClientesPorValor = this.getRelatorioTop5ClientesPorValor.bind(this);\n        this.getRelatorioProdutosServicosMaisConsumidos = this.getRelatorioProdutosServicosMaisConsumidos.bind(this);\n        this.getRelatorioConsumoPorTipoRaca = this.getRelatorioConsumoPorTipoRaca.bind(this);\n        this.getRelatorioConsumoPorTipo = this.getRelatorioConsumoPorTipo.bind(this);\n\n        this.popularDadosIniciaisLocais();\n    }\n\n    async getClientes(): Promise<Cliente[]> {\n        const clientesDoBackend = await clienteApiService.getClientes();\n        this.empresa.getClientes.splice(0, this.empresa.getClientes.length, ...clientesDoBackend);\n        return this.empresa.getClientes;\n    }\n\n    getProdutos(): Produto[] {\n        return this.empresa.getProdutos;\n    }\n\n    getServicos(): Servico[] {\n        return this.empresa.getServicos;\n    }\n\n\n    async cadastrarClienteComDados(nome: string, nomeSocial: string, cpfValor: string, dataEmissaoString: string): Promise<boolean> {\n        const sucesso = await clienteApiService.cadastrarCliente({ nome, nomeSocial, cpf: cpfValor, dataEmissaoCpf: dataEmissaoString });\n        if (sucesso) {\n            console.log(`Cliente ${nome} cadastrado com sucesso via API!`);\n            await this.getClientes(); \n        } else {\n            console.warn(`Falha ao cadastrar cliente ${nome} via API.`);\n        }\n        return sucesso;\n    }\n\n    async atualizarCliente(idCliente: number, novoNome: string, novoNomeSocial: string): Promise<boolean> {\n        const sucesso = await clienteApiService.atualizarCliente(idCliente, novoNome, novoNomeSocial);\n        if (sucesso) {\n            console.log(`Cliente ID ${idCliente} atualizado com sucesso via API!`);\n            await this.getClientes(); \n        } else {\n            console.warn(`Falha ao atualizar cliente ID ${idCliente} via API.`);\n        }\n        return sucesso;\n    }\n\n    async excluirCliente(idCliente: number): Promise<boolean> {\n        const sucesso = await clienteApiService.excluirCliente(idCliente);\n        if (sucesso) {\n            console.log(`Cliente ID ${idCliente} excluído com sucesso via API!`);\n            await this.getClientes();\n        } else {\n            console.warn(`Falha ao excluir cliente ID ${idCliente} via API.`);\n        }\n        return sucesso;\n    }\n\n    cadastrarPet(cpfCliente: string, nome: string, tipo: string, raca: string, genero: string): void {\n        const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n        if (cliente) {\n            const pet = new Pet(nome, raca, genero, tipo);\n            cliente.getPets.push(pet);\n            console.log(`Pet ${nome} cadastrado para o cliente ${cliente.nome} (localmente)`);\n        } else {\n            console.warn(`Cliente com CPF ${cpfCliente} não encontrado para cadastrar pet (localmente).`);\n        }\n    }\n\n    atualizarPet(cpfClienteOriginal: string, nomePetOriginal: string, novoNome: string, novoTipo: string, novaRaca: string, novoGenero: string): void {\n        const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfClienteOriginal);\n        if (cliente) {\n            const pet = cliente.getPets.find(p => p.getNome === nomePetOriginal);\n            if (pet) {\n                if (novoNome) pet.setNome(novoNome);\n                if (novoTipo) pet.setTipo(novoTipo);\n                if (novaRaca) pet.setRaca(novaRaca);\n                if (novoGenero) pet.setGenero(novoGenero);\n                console.log(`Pet ${nomePetOriginal} do cliente ${cliente.nome} atualizado (localmente).`);\n            } else {\n                console.warn(`Pet ${nomePetOriginal} não encontrado para o cliente ${cliente.nome} (localmente).`);\n            }\n        } else {\n            console.warn(`Cliente com CPF ${cpfClienteOriginal} não encontrado para atualizar pet (localmente).`);\n        }\n    }\n\n    excluirPet(cpfCliente: string, nomePet: string): void {\n        const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n        if (cliente) {\n            const index = cliente.getPets.findIndex(p => p.getNome === nomePet);\n            if (index !== -1) {\n                cliente.getPets.splice(index, 1);\n                console.log(`Pet ${nomePet} do cliente ${cliente.nome} excluído (localmente).`);\n            } else {\n                console.warn(`Pet ${nomePet} não encontrado para o cliente ${cliente.nome} (localmente).`);\n            }\n        } else {\n            console.warn(`Cliente com CPF ${cpfCliente} não encontrado para excluir pet (localmente).`);\n        }\n    }\n\n    cadastrarProduto(nome: string, valor: number, descricao: string): void {\n        const produto = new Produto(nome, valor, descricao);\n        this.empresa.getProdutos.push(produto);\n        console.log(`Produto ${nome} cadastrado (localmente).`);\n    }\n\n    atualizarProduto(nomeProdutoOriginal: string, novoNome: string, novoValor: number, novaDescricao: string): void {\n        const produto = this.empresa.getProdutos.find(p => p.getNome === nomeProdutoOriginal);\n        if (produto) {\n            if (novoNome) produto.setNome(novoNome);\n            if (novoValor !== undefined && novoValor !== null) produto.setValor(novoValor);\n            if (novaDescricao) produto.setDescricao(novaDescricao);\n            console.log(`Produto ${nomeProdutoOriginal} atualizado (localmente).`);\n        } else {\n            console.warn(`Produto ${nomeProdutoOriginal} não encontrado para atualização (localmente).`);\n        }\n    }\n\n    excluirProduto(nomeProduto: string): void {\n        const index = this.empresa.getProdutos.findIndex(p => p.getNome === nomeProduto);\n        if (index !== -1) {\n            this.empresa.getProdutos.splice(index, 1);\n            console.log(`Produto ${nomeProduto} excluído (localmente).`);\n        } else {\n            console.warn(`Produto ${nomeProduto} não encontrado para exclusão (localmente).`);\n        }\n    }\n\n    cadastrarServico(nome: string, valor: number, descricao: string): void {\n        const servico = new Servico(nome, valor, descricao);\n        this.empresa.getServicos.push(servico);\n        console.log(`Serviço ${nome} cadastrado (localmente).`);\n    }\n\n    atualizarServico(nomeServicoOriginal: string, novoNome: string, novoValor: number, novaDescricao: string): void {\n        const servico = this.empresa.getServicos.find(s => s.getNome === nomeServicoOriginal);\n        if (servico) {\n            if (novoNome) servico.setNome(novoNome);\n            if (novoValor !== undefined && novoValor !== null) servico.setValor(novoValor);\n            if (novaDescricao) servico.setDescricao(novaDescricao);\n            console.log(`Serviço ${nomeServicoOriginal} atualizado (localmente).`);\n        } else {\n            console.warn(`Serviço ${nomeServicoOriginal} não encontrado para atualização (localmente).`);\n        }\n    }\n\n    excluirServico(nomeServico: string): void {\n        const index = this.empresa.getServicos.findIndex(s => s.getNome === nomeServico);\n        if (index !== -1) {\n            this.empresa.getServicos.splice(index, 1);\n            console.log(`Serviço ${nomeServico} excluído (localmente).`);\n        } else {\n            console.warn(`Serviço ${nomeServico} não encontrado para exclusão (localmente).`);\n        }\n    }\n\n    registrarConsumo(cpfCliente: string, nomeItem: string, tipoItem: 'produto' | 'servico'): void {\n        const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n        if (cliente) {\n            if (tipoItem === 'produto') {\n                const produto = this.empresa.getProdutos.find(p => p.getNome === nomeItem);\n                if (produto) {\n                    cliente.getProdutosConsumidos.push(produto);\n                    console.log(`Produto ${nomeItem} registrado para ${cliente.nome} (localmente)`);\n                } else {\n                    console.warn(`Produto ${nomeItem} não encontrado (localmente).`);\n                }\n            } else if (tipoItem === 'servico') {\n                const servico = this.empresa.getServicos.find(s => s.getNome === nomeItem);\n                if (servico) {\n                    cliente.getServicosConsumidos.push(servico);\n                    console.log(`Serviço ${nomeItem} registrado para ${cliente.nome} (localmente)`);\n                } else {\n                    console.warn(`Serviço ${nomeItem} não encontrado (localmente).`);\n                }\n            }\n        } else {\n            console.warn(`Cliente com CPF ${cpfCliente} não encontrado (localmente).`);\n        }\n    }\n\n    getRelatorioTop10ClientesPorQuantidade() {\n        const listaClientes: { cliente: Cliente, quantidade: number }[] = [];\n        this.empresa.getClientes.forEach(cliente => {\n            const produtos = cliente.getProdutosConsumidos.length;\n            const servicos = cliente.getServicosConsumidos.length;\n            const total = produtos + servicos;\n            listaClientes.push({ cliente, quantidade: total });\n        });\n        const top10 = listaClientes\n            .sort((a, b) => b.quantidade - a.quantidade)\n            .slice(0, 10)\n            .map((item, index) => ({\n                posicao: index + 1,\n                cliente: item.cliente.nome,\n                quantidadeProdutos: item.cliente.getProdutosConsumidos.length,\n                quantidadeServicos: item.cliente.getServicosConsumidos.length,\n                total: item.quantidade\n            }));\n        return top10.filter(item => item.total > 0);\n    }\n\n    getRelatorioTop5ClientesPorValor() {\n        const listaClientes: { cliente: Cliente, valor: number }[] = [];\n        this.empresa.getClientes.forEach(cliente => {\n            let valorTotal = 0;\n            cliente.getProdutosConsumidos.forEach(produto => {\n                valorTotal += produto.getValor;\n            });\n            cliente.getServicosConsumidos.forEach(servico => {\n                valorTotal += servico.getValor;\n            });\n            listaClientes.push({ cliente, valor: valorTotal });\n        });\n        const top5 = listaClientes\n            .sort((a, b) => b.valor - a.valor)\n            .slice(0, 5)\n            .map((item, index) => ({\n                posicao: index + 1,\n                cliente: item.cliente.nome,\n                valorTotal: item.valor\n            }));\n        return top5.filter(item => item.valorTotal > 0);\n    }\n\n    getRelatorioProdutosServicosMaisConsumidos() {\n        const contagem: { [key: string]: { nome: string, tipo: 'Produto' | 'Serviço', quantidade: number } } = {};\n\n        this.empresa.getProdutos.forEach(p => {\n            contagem[`Produto-${p.getNome}`] = { nome: p.getNome, tipo: 'Produto', quantidade: 0 };\n        });\n        this.empresa.getServicos.forEach(s => {\n            contagem[`Serviço-${s.getNome}`] = { nome: s.getNome, tipo: 'Serviço', quantidade: 0 };\n        });\n\n        this.empresa.getClientes.forEach(cliente => {\n            cliente.getProdutosConsumidos.forEach(produto => {\n                const key = `Produto-${produto.getNome}`;\n                if (contagem[key]) {\n                    contagem[key].quantidade++;\n                }\n            });\n            cliente.getServicosConsumidos.forEach(servico => {\n                const key = `Serviço-${servico.getNome}`;\n                if (contagem[key]) {\n                    contagem[key].quantidade++;\n                }\n            });\n        });\n        const ranking = Object.values(contagem)\n            .filter(item => item.quantidade > 0)\n            .sort((a, b) => b.quantidade - a.quantidade);\n        return ranking;\n    }\n\n    getRelatorioConsumoPorTipoRaca() {\n        const resultados: { tipoRaca: string, nome: string, tipo: 'Produto' | 'Serviço', quantidade: number }[] = [];\n\n        this.empresa.getClientes.forEach(cliente => {\n            cliente.getPets.forEach(pet => {\n                const tipo = pet.getTipo;\n                const raca = pet.getRaca;\n                \n                if (!tipo || !raca || tipo.trim() === '' || raca.trim() === '') {\n                    console.warn(`[Relatório Tipo/Raça] Pulando Pet com tipo/raça indefinidos/vazios para cliente ${cliente.nome}: ${pet.getNome}`);\n                    return;\n                }\n\n                const tipoRaca = `${tipo} - ${raca}`;\n\n                cliente.getProdutosConsumidos.forEach(produto => {\n                    let encontrado = resultados.find(r => r.tipoRaca === tipoRaca && r.nome === produto.getNome && r.tipo === 'Produto');\n                    if (encontrado) {\n                        encontrado.quantidade++;\n                    } else {\n                        resultados.push({ tipoRaca, nome: produto.getNome, tipo: 'Produto', quantidade: 1 });\n                    }\n                });\n                cliente.getServicosConsumidos.forEach(servico => {\n                    let encontrado = resultados.find(r => r.tipoRaca === tipoRaca && r.nome === servico.getNome && r.tipo === 'Serviço');\n                    if (encontrado) {\n                        encontrado.quantidade++;\n                    } else {\n                        resultados.push({ tipoRaca, nome: servico.getNome, tipo: 'Serviço', quantidade: 1 });\n                    }\n                });\n            });\n        });\n        \n        const grupos: { [key: string]: { tipoRaca: string, nome: string, tipo: 'Produto' | 'Serviço', quantidade: number }[] } = {};\n        resultados.forEach(item => {\n            if (!grupos[item.tipoRaca]) grupos[item.tipoRaca] = [];\n            grupos[item.tipoRaca].push(item);\n        });\n        \n        const relatorioFinal: any[] = [];\n        Object.keys(grupos).sort().forEach(tipoRaca => {\n            grupos[tipoRaca].sort((a, b) => b.quantidade - a.quantidade).forEach(item => {\n                relatorioFinal.push(item);\n            });\n        });\n        \n        return relatorioFinal;\n    }\n\n    getRelatorioConsumoPorTipo() {\n        const resultados: { tipoPet: string, nomeItem: string, tipoItem: 'Produto' | 'Serviço', quantidade: number }[] = [];\n\n        this.empresa.getClientes.forEach(cliente => {\n            cliente.getPets.forEach(pet => {\n                const tipoPet = pet.getTipo;\n                \n                if (!tipoPet || tipoPet.trim() === '') {\n                    console.warn(`[Relatório Tipo] Pulando Pet com tipo indefinido/vazio para cliente ${cliente.nome}: ${pet.getNome}`);\n                    return;\n                }\n\n                cliente.getProdutosConsumidos.forEach(produto => {\n                    let encontrado = resultados.find(r => r.tipoPet === tipoPet && r.nomeItem === produto.getNome && r.tipoItem === 'Produto');\n                    if (encontrado) {\n                        encontrado.quantidade++;\n                    } else {\n                        resultados.push({ tipoPet, nomeItem: produto.getNome, tipoItem: 'Produto', quantidade: 1 });\n                    }\n                });\n                cliente.getServicosConsumidos.forEach(servico => {\n                    let encontrado = resultados.find(r => r.tipoPet === tipoPet && r.nomeItem === servico.getNome && r.tipoItem === 'Serviço');\n                    if (encontrado) {\n                        encontrado.quantidade++;\n                    } else {\n                        resultados.push({ tipoPet, nomeItem: servico.getNome, tipoItem: 'Serviço', quantidade: 1 });\n                    }\n                });\n            });\n        });\n\n        const grupos: { [key: string]: { tipoPet: string, nomeItem: string, tipoItem: 'Produto' | 'Serviço', quantidade: number }[] } = {};\n        resultados.forEach(item => {\n            if (!grupos[item.tipoPet]) grupos[item.tipoPet] = [];\n            grupos[item.tipoPet].push(item);\n        });\n        \n        const relatorioFinal: any[] = [];\n        Object.keys(grupos).sort().forEach(tipoPet => {\n            grupos[tipoPet].sort((a, b) => b.quantidade - a.quantidade).forEach(item => {\n                relatorioFinal.push(item);\n            });\n        });\n        \n        return relatorioFinal;\n    }\n\n\n    private popularDadosIniciaisLocais(): void {\n        const racaoPremium = new Produto(\"Ração Premium\", 75.50, \"Ração de alta qualidade para cães e gatos\");\n        this.empresa.getProdutos.push(racaoPremium);\n\n        const visitaVeterinaria = new Servico(\"Visita Veterinária\", 500.00, \"Consulta e check-up geral\");\n        this.empresa.getServicos.push(visitaVeterinaria);\n\n        const petCachorro = new Pet(\"Buddy\", \"Poodle\", \"Macho\", \"Cachorro\");\n        const petGato = new Pet(\"Mia\", \"Siamese\", \"Fêmea\", \"Gato\");\n        const petPassaro = new Pet(\"Pipoca\", \"Calopsita\", \"Fêmea\", \"Pássaro\");\n\n        console.log(\"Produtos e Serviços locais populados.\");\n    }\n}\n\nconst empresaService = new EmpresaService();\nexport default empresaService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}